---
# vim: set ft=ansible:

- name: "Wait for {{ ocp4_aio_baremetal_provider }} instance to come online..."
  ansible.builtin.wait_for_connection:
    timeout: 300

- name: Gather minimal facts
  ansible.builtin.setup:
    gather_subset: hardware

- name: Check system matches requirements
  ansible.builtin.assert:
    that:
      - ansible_memtotal_mb >= 100000
      - ansible_facts['os_family'] in ['RedHat','Rocky']
      - ansible_facts['distribution_major_version'] == '8'

- name: Install EPEL Repo
  ansible.builtin.dnf:
    name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
    state: present
    disable_gpg_check: true
  become: true

- name: Check if firewalld is available
  ansible.builtin.command: systemctl status firewalld
  register: firewalld_avail
  failed_when: firewalld_avail.rc == 1

- name: Check if iptables is available
  ansible.builtin.command: systemctl status iptables
  register: iptables_avail
  failed_when: iptables_avail.rc == 1

- name: Disable firewalld
  ansible.builtin.systemd:
    name: firewalld
    enabled: false
    state: stopped
  when:
    - firewalld_avail.rc < 4

- name: Install iptables if unavailable
  ansible.builtin.dnf:
    name:
      - iptables
      - iptables-services
    state: latest
    skip_broken: true
  become: true
  when: iptables_avail.rc == 4

- name: Enable iptables for IPI deployments
  ansible.builtin.systemd:
    name: iptables
    enabled: true
    state: started

- name: Install required base packages
  ansible.builtin.dnf:
    name:
      - wget
      - libvirt
      - qemu-kvm
      - virt-manager
      - virt-install
      - libguestfs
      - libguestfs-tools
      - libguestfs-xfs
      - net-tools
      - sshpass
      - virt-what
      - nmap
      - lvm2
      - python3-libselinux
    state: latest
    skip_broken: true
  become: true

- name: create folder for ceph osd images
  ansible.builtin.file:
    path: /var/lib/libvirt/images/ceph
    state: directory
    mode: "0755"

- name: Configure libvirt VG/PV/FS
  when: cloud_provider == "equinix_metal"
  block:
  - name: "Check if the node is using /dev/sda"
    ansible.builtin.stat:
      path: "/dev/sda"
    register: result

  - name: Prepare libvirt images storage VG
    community.general.lvg:
      vg: vg.libvirt
      pvs: /dev/nvme1n1
    when: result.stat.exists

  - name: Prepare libvirt images storage VG
    community.general.lvg:
      vg: vg.libvirt
      pvs: /dev/nvme2n1,/dev/nvme3n1
    when: not result.stat.exists

  - name: Prepare libvirt images storage LV
    community.general.lvol:
      vg: vg.libvirt
      lv: lvimages
      size: 20%FREE

  - name: Create filesystem on libvirt storage LV
    community.general.filesystem:
      fstype: ext4
      dev: /dev/vg.libvirt/lvimages

  - name: Mount libvirt images backend storage if needed
    ansible.posix.mount:
      path: /var/lib/libvirt/images
      src: /dev/vg.libvirt/lvimages
      fstype: ext4
      state: mounted

  - name: Prepare ceph osd images storage LV
    community.general.lvol:
      vg: vg.libvirt
      lv: lvosd
      size: 100%FREE

  - name: Create filesystem on ceph osd storage LV
    community.general.filesystem:
      fstype: ext4
      dev: /dev/vg.libvirt/lvosd

  - name: Mount ceph osd images backend storage if needed
    ansible.posix.mount:
      path: /var/lib/libvirt/images/ceph
      src: /dev/vg.libvirt/lvosd
      fstype: ext4
      state: mounted

- name: Enable Libvirt
  ansible.builtin.systemd:
    name: libvirtd
    enabled: true
    state: started

- name: Enable Chronyd NTP Server
  ansible.builtin.replace:
    path: /etc/chrony.conf
    regexp: '^#local stratum 10'
    replace: 'local stratum 10'

- name: Enable Chronyd NTP Server
  ansible.builtin.replace:
    path: /etc/chrony.conf
    regexp: '^#allow 192.168.0.0/16'
    replace: allow 192.168.123.0/24

- name: Restart Chronyd
  ansible.builtin.service:
    name: chronyd
    state: restarted
